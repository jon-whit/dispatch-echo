// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: dispatch-echo/v1/dispatch_echo_service.proto

package dispatch_echov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DispatchEchoService_Echo_FullMethodName = "/dispatch_echo.v1.DispatchEchoService/Echo"
)

// DispatchEchoServiceClient is the client API for DispatchEchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatchEchoServiceClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type dispatchEchoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatchEchoServiceClient(cc grpc.ClientConnInterface) DispatchEchoServiceClient {
	return &dispatchEchoServiceClient{cc}
}

func (c *dispatchEchoServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, DispatchEchoService_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatchEchoServiceServer is the server API for DispatchEchoService service.
// All implementations must embed UnimplementedDispatchEchoServiceServer
// for forward compatibility
type DispatchEchoServiceServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	mustEmbedUnimplementedDispatchEchoServiceServer()
}

// UnimplementedDispatchEchoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDispatchEchoServiceServer struct {
}

func (UnimplementedDispatchEchoServiceServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedDispatchEchoServiceServer) mustEmbedUnimplementedDispatchEchoServiceServer() {}

// UnsafeDispatchEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatchEchoServiceServer will
// result in compilation errors.
type UnsafeDispatchEchoServiceServer interface {
	mustEmbedUnimplementedDispatchEchoServiceServer()
}

func RegisterDispatchEchoServiceServer(s grpc.ServiceRegistrar, srv DispatchEchoServiceServer) {
	s.RegisterService(&DispatchEchoService_ServiceDesc, srv)
}

func _DispatchEchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatchEchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DispatchEchoService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatchEchoServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DispatchEchoService_ServiceDesc is the grpc.ServiceDesc for DispatchEchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatchEchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dispatch_echo.v1.DispatchEchoService",
	HandlerType: (*DispatchEchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _DispatchEchoService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatch-echo/v1/dispatch_echo_service.proto",
}
